using Audity.Model;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Audity.Resolver
{
    internal class AudityContractResolver : DefaultContractResolver
    {

        protected override IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization)
        {
            var properties = base.CreateProperties(type, memberSerialization);
            var nonProxyType = GetUnproxiedType(type);

            return properties.Where(p =>
            {
                // Always check for property and attribute on the un-proxied type.
                var propInfo = nonProxyType.GetProperty(p.UnderlyingName, BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy);

                // If the property doesn't exist on the base type hierarchy (e.g. proxy-specific interceptor fields), ignore it.
                if (propInfo == null)
                {
                    return false;
                }

                // Otherwise, include it only if it's NOT marked with AudityIgnore.
                return !propInfo.IsDefined(typeof(AudityIgnoreAttribute), true);
            }).ToList();
        }

        private static Type GetUnproxiedType(Type type)
        {
            // This is a heuristic for EF Core lazy loading proxies, which are generated by Castle.DynamicProxy.
            // It assumes the proxy type inherits directly from the entity type.
            if (type != null && type.Namespace == "Castle.Proxies")
            {
                return type.BaseType;
            }
            return type;
        }
    }
}
